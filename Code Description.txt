Code Explanation:
1. The libraries ‘ESP8266.h’ and ‘PubSubClient.h’ are required to allow the NodeMCU to connect to the internet using the MQTT protocol and Mosquitto Server.
2. There are variables declared for input and output pins. ‘Integer’ datatype variables are required to take the integer input while the ‘String’ datatype variables are required to convert those integer values to string data type so that it can be sent to the cloud because the cloud will take only the char data.
3. The internet connection is set up using the mobile hotspot with a specific id and password. Also, I have mentioned the mqtt server as ‘test.mosquitto.org’ because here I am using mosquitto as the broker.
4. To connect the MQTT client to the internet, I have created a Wi-Fi client and have created the variables through which I can publish a specific message on the cloud.


Modules Description:
1. Setup(): this module is called as soon as we connect the node mcu to our laptop and open the arduino code. As soon as the node mcu gets connected to the laptop, I allow the built in LED of the node mcu to light up, indicating that the node mcu is connected. I have mentioned the board number of the serail monitor as ‘115200’ which helps in opening of the serial monitor at port ‘COM 14’. Also, I have initialized the sensor pins as the input while led pin for the buzzer as the output specifying the mqtt server port as 1883. This module helps to set up the system initially.
2. Setup_wifi(): this module allows to connect to the internet using the hotspot id and password as mentioned in the beginning of the code. Till the time we are not connected to the internet, we print a ‘dot’ and as we get connected, we show the status as ‘connected’ along with its ‘IP Address’.
3. Reconnect():this module allows the NodeMCU to connect to the cloud using the MQTT protocol. Here, I have mentioned a specefic ‘client id’ which will act as the ‘id’ for the entire system. This client id will be used inside the mobile app which allows to connect to the cloud and will enable to monitor this system. If the MQTT connection fails, then the ‘rc’ status will be presented and an attempt for reconnection will be done every 5 seconds till we get connected.
4. Loop(): this module is called immediately after the setup() function. Initially, as we are not connected to the internet, we call the ‘reconnect()’ function to connect to the cloud. Once, we get connected, we calculate the time that has elapsed since the system has started and check if the time elapsed is greater than 2 seconds. If 2 seconds has elapsed, we read the new smoke value that is in our system, we read the smoke value and fire value in every 2 seconds. I have declared the ‘desn1 and dsenc1’ variables to take the fire value as ‘0’ or ‘1’ and the ‘dsen2 dsenc2’ variables to take the smoke values. The ‘dsen1 and dsen2’ values converted to char array type so that they can be used to publish message on cloud while the ‘dsenc1 and dsenc2’ values are used to compare with certain values to determine if fire and smoke is present or not. The serial monitor with board number ‘115200’ will show the connection status and the smoke value along with fire status. Using the ids: ‘smfr1’ - we can view the smoke values, ‘smfr2’ – we can view the status of the fire as ‘FIRE DETECTED’ or ‘NO FIRE,‘smfr 3’ - we can view the status of the smoke as ‘SMOKE DETECTED’ or ‘NO SMOKE’ based upon the threshold value and based upon that we set up the LED6_PIN as high  or low.
